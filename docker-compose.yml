services:
    web:
        build: .
        command: >
            sh -c "
            python manage.py migrate --noinput &&
            python manage.py collectstatic --noinput &&
            gunicorn todoproject.wsgi:application -b 0.0.0.0:8000
            "
        healthcheck:
            test: ["CMD-SHELL", "curl -fs http://localhost:8000/todo/ || exit 1"]
            interval: 10s
            timeout: 3s
            retries: 5
            start_period: 20s
        expose: ["8000"]
        container_name: django_app
        #ports:
        #    - 8000:8000
        volumes:
            - ./src:/app
            - static_volume:/app/staticfiles      # collected static
            - media_volume:/app/media             # user uploads
        depends_on:
            db:
                condition: service_healthy
                restart: true
            redis:
                condition: service_healthy
        
        
        env_file:
            - .env
    
    celery_worker:
        build: .
        container_name: celery_worker
        command: celery -A todoproject worker -l info --concurrency=4
        volumes:
            - ./src:/app
        env_file: .env
        depends_on:
            - web
            - redis

    celery_beat:
        build: .
        container_name: celery_beat
        command: celery -A todoproject beat -l info
        volumes:
            - ./src:/app
        env_file: .env
        depends_on:
            - web
            - redis

    redis:
        image: redis:7
        container_name: redis
        healthcheck:           
            test: ["CMD", "redis-cli", "ping"]
            interval: 5s
            retries: 5

        ports:
            - "6379:6379"

    nginx:
        image: nginx:alpine
        container_name: nginx
        ports:
            - "80:80"

        volumes:
            - ./config/nginx/django.conf:/etc/nginx/conf.d/default.conf:ro
            - static_volume:/staticfiles:ro       # same data, read-only
            - media_volume:/media:ro
        depends_on:
            web:
                condition: service_healthy
                
    
    
    
    db:
        image: postgres:17
        container_name: postgres_db
        volumes:
            - postgres_db:/var/lib/postgresql/data/
        env_file:
            - .env
        environment:
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_DB: ${POSTGRES_DB}
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
            interval: 10s
            start_period: 30s
            timeout: 10s
            retries: 5


volumes:
    postgres_db:
    static_volume:
    media_volume: